package ai.hypergraph.shipshape

import org.intellij.lang.annotations.Language
import kotlin.math.pow

fun main() {
  println(genBooleanTypeAliases())
}

@Language("kt")
fun genBinaryArithmetic() = """
// This file was generated by Shipshape

@file:Suppress("UNUSED_PARAMETER", "UNCHECKED_CAST")
package ai.hypergraph.kotlingrad.typelevel.arithmetic

import kotlin.jvm.JvmName

sealed class B<X, P : B<X, P>>(open val x: X? = null) {
  val T: T<P> get() = T(this as P)
  val F: F<P> get() = F(this as P)

  abstract fun flip(): B<X, *>
  override fun equals(other: Any?) = toString() == other.toString()
  override fun hashCode() = this::class.hashCode() + x.hashCode()
  override fun toString() = "" + (x ?: "") + if (this is T) "1" else "0"
}

open class T<X>(override val x: X = Ø as X) : B<X, T<X>>(x) {
  companion object: T<Ø>(Ø)
  override fun flip(): F<X> = F(x)
}
open class F<X>(override val x: X = Ø as X) : B<X, F<X>>(x) {
  companion object: F<Ø>(Ø)
  override fun flip(): T<X> = T(x)
}

@Suppress("NonAsciiCharacters", "ClassName")
object Ø: B<Ø, Ø>(null) { override fun flip() = Ø }

fun B<*, *>.toInt(): Int = toInt(toString())
tailrec fun toInt(s: String, sum: Int = 0): Int =
  if (s.isEmpty()) sum else toInt(s.substring(1), (sum shl 1) + s[0].digitToInt())

/**
*     i │  0  1  …  k-1  k  │  k+1  k+2  …  k+c  │ k+c+1  …  k+c+k 
*    ───┼───────────────────┼────────────────────┼─────────────────┐ ┐
*     0 │                   │                    │              __/X │
*     1 │                   │                    │           __/XXXX │
*     … │       i ± i       │        k ± i       │        __/XXXXXXX ├ ┐
*   k-1 │                   │                    │     __/XXXXXXXXXX │ │
*     k │                   │                    │  __╱XXXXXXXXXXXXX │ │
*   ────┼───────────────────┼────────────────────┴─┘XXXXXXXXXXXXXXXX ┘ │
*   k+1 │                   │XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │
*   k+2 │                   │XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │
*     … │       i ± k       │XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │
*     … │                   │XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │ 
*   k+c │                   │XXXXXXXXXXXX                XXXXXXXXXXX   │
*  ─────┼───────────────────┤XXXXXXXXXXXX    Run-time    XXXXXXXXXXX   │
* k+c+1 │               ___/XXXXXXXXXXXXX  type checked  XXXXXXXXXXX   │
*     … │           ___/XXXXXXXXXXXXXXXXX                XXXXXXXXXXX   │
*     … │       ___/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │
*     … │   ___/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │
* k+c+k │__/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   │
*                                                                      
*       └─────────┬─────────┘                               Compile-time
*                 └─────────────────────────────────────    type checked 
*/

// Left padded with 0, B_0N indicates a binary string *0{B_0N}
// Enumerate (max(2ⁱ-k, 0), 2ⁱ+k) ∀0≤i≤⌊log₂(k+c+k)⌋
// i.e.: {0, 1, 2, *(4-k, 4+k), *(8-k, 8+k), *(16-k, 16+k),..., *(2^⌊log₂(k+c+k)⌋-k, 2^⌊log₂(k+c+k)⌋+k)}

${genBooleanTypeAliases()}

@JvmName("bnp1") fun Ø.plus1() = T(Ø)
@JvmName("b0p1") fun B_0<Ø>.plus1() = T(Ø)
@JvmName("b1p1") fun B_1<Ø>.plus1() = F(x.plus1())
@JvmName("b3p1") fun B_3<Ø>.plus1() = F(x.plus1())
@JvmName("b7p1") fun B_7<Ø>.plus1() = F(x.plus1())
@JvmName("b15p1") fun B_15<Ø>.plus1() = F(x.plus1())
@JvmName("b?0p1")  fun <K: B<*, *>> B_0<K>.plus1() = T(x)
@JvmName("b?01p1") fun <K: B<*, *>> B_1<F<K>>.plus1() = F(x.plus1())
@JvmName("b?03p1") fun <K: B<*, *>> B_3<F<K>>.plus1() = F(x.plus1())
@JvmName("b?07p1") fun <K: B<*, *>> B_7<F<K>>.plus1() = F(x.plus1())
@JvmName("b?015p1") fun <K: B<*, *>> B_15<F<K>>.plus1() = F(x.plus1())

@JvmName("b1m1") fun B_1<Ø>.minus1() = F(Ø)
@JvmName("b2m1") fun B_2<Ø>.minus1() = T(Ø)
@JvmName("b4m1") fun B_4<Ø>.minus1() = T(x.minus1())
@JvmName("b8m1") fun B_8<Ø>.minus1() = T(x.minus1())
@JvmName("b16m1") fun B_16<Ø>.minus1() = T(x.minus1())
@JvmName("b?1m1") fun <K: B<*, *>> B_1<K>.minus1() = F(x)
@JvmName("b?2m1") fun <K: B<*, *>> B_2<K>.minus1() = T(x.minus1())
@JvmName("b?4m1") fun <K: B<*, *>> B_4<K>.minus1() = T(x.minus1())
@JvmName("b?8m1") fun <K: B<*, *>> B_8<K>.minus1() = T(x.minus1())
@JvmName("b?16m1") fun <K: B<*, *>> B_16<K>.minus1() = T(x.minus1())

@JvmName("b0p2") fun Ø.plus2(): F<T<Ø>> = plus1().plus1()
@JvmName("b0p2") fun F<Ø>.plus2(): F<T<Ø>> = plus1().plus1()
@JvmName("b1p2") fun B_1<Ø>.plus2(): T<T<Ø>> = plus1().plus1()
@JvmName("b2p2") fun B_2<Ø>.plus2(): F<F<T<Ø>>> = plus1().plus1()
@JvmName("b3p2") fun B_3<Ø>.plus2(): T<F<T<Ø>>> = plus1().plus1()
@JvmName("b6p2") fun B_6<Ø>.plus2(): F<F<F<T<Ø>>>> = plus1().plus1()
@JvmName("b7p2") fun B_7<Ø>.plus2(): T<F<F<T<Ø>>>> = plus1().plus1()
@JvmName("b14p2") fun B_14<Ø>.plus2(): F<F<F<F<T<Ø>>>>> = plus1().plus1()
@JvmName("b15p2") fun B_15<Ø>.plus2(): T<F<F<F<T<Ø>>>>> = plus1().plus1()

@JvmName("b?00p2") fun <K: B<*, *>> B_0<F<K>>.plus2(): F<T<K>> = plus1().plus1()
@JvmName("b?01p2") fun <K: B<*, *>> B_1<F<K>>.plus2(): T<T<K>> = plus1().plus1()
@JvmName("b?02p2") fun <K: B<*, *>> B_2<F<K>>.plus2(): F<F<T<K>>> = plus1().plus1()
@JvmName("b?03p2") fun <K: B<*, *>> B_3<F<K>>.plus2(): T<F<T<K>>> = plus1().plus1()
@JvmName("b?06p2") fun <K: B<*, *>> B_6<F<K>>.plus2(): F<F<F<T<K>>>> = plus1().plus1()
@JvmName("b?07p2") fun <K: B<*, *>> B_7<F<K>>.plus2(): T<F<F<T<K>>>> = plus1().plus1()
@JvmName("b?014p2") fun <K: B<*, *>> B_14<F<K>>.plus2(): F<F<F<F<T<K>>>>> = plus1().plus1()
@JvmName("b?015p2") fun <K: B<*, *>> B_15<F<K>>.plus2(): T<F<F<F<T<K>>>>> = plus1().plus1()

@JvmName("b2m2") fun B_2<Ø>.minus2() = minus1().minus1()
@JvmName("b3m2") fun B_3<Ø>.minus2() = minus1().minus1()
@JvmName("b4m2") fun B_4<Ø>.minus2() = minus1().minus1()
@JvmName("b5m2") fun B_5<Ø>.minus2() = minus1().minus1()
@JvmName("b8m2") fun B_8<Ø>.minus2() = minus1().minus1()
@JvmName("b9m2") fun B_9<Ø>.minus2() = minus1().minus1()
@JvmName("b16m2") fun B_16<Ø>.minus2() = minus1().minus1()
@JvmName("b17m2") fun B_17<Ø>.minus2() = minus1().minus1()

@JvmName("b?2m2") fun <K: B<*, *>> B_2<K>.minus2() = minus1().minus1()
@JvmName("b?3m2") fun <K: B<*, *>> B_3<K>.minus2() = minus1().minus1()
@JvmName("b?4m2") fun <K: B<*, *>> B_4<K>.minus2() = minus1().minus1()
@JvmName("b?5m2") fun <K: B<*, *>> B_5<K>.minus2() = minus1().minus1()
@JvmName("b?8m2") fun <K: B<*, *>> B_8<K>.minus2() = minus1().minus1()
@JvmName("b?9m2") fun <K: B<*, *>> B_9<K>.minus2() = minus1().minus1()
@JvmName("b?16m2") fun <K: B<*, *>> B_16<K>.minus2() = minus1().minus1()
@JvmName("b?17m2") fun <K: B<*, *>> B_17<K>.minus2() = minus1().minus1()

@JvmName("b0p3") fun Ø.plus3(): T<T<Ø>> = plus2().plus1()
@JvmName("b0p3") fun F<Ø>.plus3(): T<T<Ø>> = plus2().plus1()
@JvmName("b2p3") fun B_2<Ø>.plus3(): T<F<T<Ø>>> = plus2().plus1()
@JvmName("b3p3") fun B_3<Ø>.plus3(): F<T<T<Ø>>> = plus2().plus1()
@JvmName("b6p3") fun B_6<Ø>.plus3(): T<F<F<T<Ø>>>> = plus2().plus1()
@JvmName("b7p3") fun B_7<Ø>.plus3(): F<T<F<T<Ø>>>> = plus2().plus1()
@JvmName("b14p3") fun B_14<Ø>.plus3(): T<F<F<F<T<Ø>>>>> = plus2().plus1()
@JvmName("b15p3") fun B_15<Ø>.plus3(): F<T<F<F<T<Ø>>>>> = plus2().plus1()

@JvmName("b?00p3") fun <K: B<*, *>> B_0<F<K>>.plus3(): T<T<K>> = plus2().plus1()
@JvmName("b?02p3") fun <K: B<*, *>> B_2<F<K>>.plus3(): T<F<T<K>>> = plus2().plus1()
@JvmName("b?03p3") fun <K: B<*, *>> B_3<F<K>>.plus3(): F<T<T<K>>> = plus2().plus1()
@JvmName("b?05p3") fun <K: B<*, *>> B_5<F<K>>.plus3(): F<F<F<T<K>>>> = plus2().plus1()
@JvmName("b?06p3") fun <K: B<*, *>> B_6<F<K>>.plus3(): T<F<F<T<K>>>> = plus2().plus1()
@JvmName("b?07p3") fun <K: B<*, *>> B_7<F<K>>.plus3(): F<T<F<T<K>>>> = plus2().plus1()
@JvmName("b?013p3") fun <K: B<*, *>> B_13<F<K>>.plus3(): F<F<F<F<T<K>>>>> = plus2().plus1()
@JvmName("b?014p3") fun <K: B<*, *>> B_14<F<K>>.plus3(): T<F<F<F<T<K>>>>> = plus2().plus1()
@JvmName("b?015p3") fun <K: B<*, *>> B_15<F<K>>.plus3(): F<T<F<F<T<K>>>>> = plus2().plus1()

@JvmName("b3m3") fun B_3<Ø>.minus3() = minus2().minus1()
@JvmName("b4m3") fun B_4<Ø>.minus3() = minus2().minus1()
@JvmName("b5m3") fun B_5<Ø>.minus3() = minus2().minus1()
@JvmName("b6m3") fun B_6<Ø>.minus3() = minus2().minus1()
@JvmName("b8m3") fun B_8<Ø>.minus3() = minus2().minus1()
@JvmName("b9m3") fun B_9<Ø>.minus3() = minus2().minus1()
@JvmName("b10m3") fun B_10<Ø>.minus3() = minus2().minus1()
@JvmName("b16m3") fun B_16<Ø>.minus3() = minus2().minus1()
@JvmName("b17m3") fun B_17<Ø>.minus3() = minus2().minus1()
@JvmName("b18m3") fun B_18<Ø>.minus3() = minus2().minus1()

@JvmName("b?3m3") fun <K: B<*, *>> B_3<K>.minus3() = minus2().minus1()
@JvmName("b?4m3") fun <K: B<*, *>> B_4<K>.minus3() = minus2().minus1()
@JvmName("b?5m3") fun <K: B<*, *>> B_5<K>.minus3() = minus2().minus1()
@JvmName("b?6m3") fun <K: B<*, *>> B_6<K>.minus3() = minus2().minus1()
@JvmName("b?8m3") fun <K: B<*, *>> B_8<K>.minus3() = minus2().minus1()
@JvmName("b?9m3") fun <K: B<*, *>> B_9<K>.minus3() = minus2().minus1()
@JvmName("b?10m3") fun <K: B<*, *>> B_10<K>.minus3() = minus2().minus1()
@JvmName("b?16m3") fun <K: B<*, *>> B_16<K>.minus3() = minus2().minus1()
@JvmName("b?17m3") fun <K: B<*, *>> B_17<K>.minus3() = minus2().minus1()
@JvmName("b?18m3") fun <K: B<*, *>> B_18<K>.minus3() = minus2().minus1()
"""

fun genBooleanTypeAliases(k: Int = 10): String =
  (0..10).asSequence().map { 2.0.pow(it).toInt() }
    .map { (it - k + 1).coerceAtLeast(0) until (it + k) }
    .flatten().distinct().joinToString("\n") { "typealias B_$it<B> = ${it.toBigEndian()}" }

fun genBooleanPlusMinus(k: Int = 10): String =
  (1..3).joinToString("\n\n") {
//    "
//      @JvmName("b1p1") fun B_1<Ø>.plus1() = F(x.plus1())
//      @JvmName("b3p1") fun B_3<Ø>.plus1() = F(x.plus1())
//      @JvmName("b7p1") fun B_7<Ø>.plus1() = F(x.plus1())
//      @JvmName("b15p1") fun B_15<Ø>.plus1() = F(x.plus1())
//    """.trimIndent()
    (0..10).asSequence().map { 2.0.pow(it).toInt() }
      .map { (it - k + 1).coerceAtLeast(0) until (it + k) }
      .flatten().distinct().joinToString("\n") { "typealias B_$it<B> = ${it.toBigEndian()}" }

//    (0..10).asSequence().map { 2.0.pow(it).toInt() }.map {
//
//    }

  }

fun Int.toBigEndian() =
  toString(2).fold("B") { a, b -> if(b == '0') "F<$a>" else "T<$a>" }